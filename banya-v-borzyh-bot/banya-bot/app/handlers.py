from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import callback_query
from app.fsm import WaitingListStates
from app.database import get_db_session, Client, WaitingList
from app.keyboards import start_kb, help_kb, back_to_help, get_dates_keyboard, get_people_count_keyboard, get_waiting_confirmation_keyboard, get_waiting_management_keyboard
from app.admin_keyboards import get_admin_panel_keyboard
from app.admin_filters import AdminFilter
from .data import get_data

router = Router()
data = []

@router.message(Command("start"), ~AdminFilter())
async def user_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_kb
    )

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    global data
    data = await get_data()
    kb = await help_kb(data)
    await message.answer(
        "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=kb
    )

@router.callback_query(F.data == 'back_to_faq')
async def back_to_faq(callback: types.CallbackQuery):
    global data
    kb = await help_kb(data)
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=kb)

@router.callback_query(F.data.isdigit())
async def update_data_handler(callback: types.CallbackQuery):
    global data
    await callback.message.edit_text(text=data[int(callback.data)]['Answer'], reply_markup=back_to_help)

@router.message(F.text == "üìù –ó–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
async def start_waiting_list(message: types.Message, state: FSMContext):
    keyboard = get_dates_keyboard()
    await message.answer(
        "üìù –ó–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã:",
        reply_markup=keyboard
    )
    await state.set_state(WaitingListStates.choosing_dates)

@router.callback_query(WaitingListStates.choosing_dates, F.data.startswith("date_"))
async def choose_dates(callback: types.CallbackQuery, state: FSMContext):
    date_choice = callback.data
    
    dates_map = {
        "date_any": "–ù–µ–≤–∞–∂–Ω–æ",
        "date_specific": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã"
    }
    
    selected_dates = dates_map.get(date_choice)
    
    if selected_dates:
        await state.update_data(dates=selected_dates)
        await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –¥–∞—Ç—ã: {selected_dates}")
        
        if date_choice == "date_specific":
            await callback.message.answer(
                "üìÖ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–≤—Ç—Ä–∞', '—Å—É–±–±–æ—Ç–∞', '15-17 —è–Ω–≤–∞—Ä—è'):"
            )
            await state.set_state(WaitingListStates.entering_specific_dates)
        else:
            keyboard = get_people_count_keyboard()
            await callback.message.answer(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:",
                reply_markup=keyboard
            )
            await state.set_state(WaitingListStates.choosing_people_count)
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç")
    
    await callback.answer()

@router.message(WaitingListStates.entering_specific_dates)
async def enter_specific_dates(message: types.Message, state: FSMContext):
    specific_dates = message.text
    await state.update_data(specific_dates=specific_dates)
    
    keyboard = get_people_count_keyboard()
    await message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:",
        reply_markup=keyboard
    )
    await state.set_state(WaitingListStates.choosing_people_count)

@router.callback_query(WaitingListStates.choosing_people_count, F.data.startswith("people_"))
async def choose_people_count(callback: types.CallbackQuery, state: FSMContext):
    people_data = callback.data
    
    people_map = {
        "people_1": "1",
        "people_2": "2", 
        "people_3": "3",
        "people_4": "4",
        "people_5": "5",
        "people_6": "6+"
    }
    
    people_count = people_map.get(people_data)
    
    if people_count:
        await state.update_data(people_count=people_count)
        await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {people_count}")
        
        await callback.message.answer(
            "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
        )
        await state.set_state(WaitingListStates.entering_phone)
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    
    await callback.answer()

@router.message(WaitingListStates.entering_phone)
async def enter_phone(message: types.Message, state: FSMContext):
    phone = message.text
    await state.update_data(phone=phone)
    
    data = await state.get_data()
    
    dates_text = data['dates']
    if data.get('specific_dates'):
        dates_text = f"{dates_text} ({data['specific_dates']})"
    
    confirmation_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è:\n\n"
        f"üìÖ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã: {dates_text}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {data['people_count']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üë§ –ò–º—è: {message.from_user.first_name}\n\n"
        "üìù –í—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –º–µ—Å—Ç–∞."
    )
    
    keyboard = get_waiting_confirmation_keyboard()
    
    await message.answer(confirmation_text, reply_markup=keyboard)
    await state.set_state(WaitingListStates.confirming)

@router.callback_query(WaitingListStates.confirming, F.data == "confirm_waiting")
async def confirm_waiting(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    session = get_db_session()
    
    try:
        client = Client(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            phone=data['phone']
        )
        session.add(client)
        session.flush()
        
        dates_info = data['dates']
        if data.get('specific_dates'):
            dates_info = f"{dates_info} ({data['specific_dates']})"
        
        waiting_entry = WaitingList(
            client_id=client.id,
            preferred_dates=dates_info,
            people_count=data['people_count']
        )
        session.add(waiting_entry)
        session.commit()
        
        await callback.message.edit_text(
            "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è!\n\n"
            f"üìÖ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã: {dates_info}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {data['people_count']}\n\n"
            "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –º–µ—Å—Ç–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏'"
        )

    except Exception as e:
        session.rollback()
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
        print(f"Database error: {e}")

    finally:
        session.close()
        await state.clear()

@router.callback_query(WaitingListStates.confirming, F.data == "cancel_waiting")
async def cancel_waiting(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()

@router.message(F.text == "üìã –ú–æ–π —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏")
async def show_my_waiting_status(message: types.Message):
    session = get_db_session()
    try:
        client = session.query(Client).filter_by(user_id=message.from_user.id).first()
        
        if not client:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è")
            return
        
        waiting_entry = session.query(WaitingList).filter_by(
            client_id=client.id, 
            is_active=True
        ).first()
        
        if not waiting_entry:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è")
            return
        
        all_waiting = session.query(WaitingList).filter_by(is_active=True).order_by(WaitingList.created_at).all()
        position = all_waiting.index(waiting_entry) + 1
        
        status_text = (
            "üìã –í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è:\n\n"
            f"üìÖ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã: {waiting_entry.preferred_dates}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {waiting_entry.people_count}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {waiting_entry.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position} –∏–∑ {len(all_waiting)}\n\n"
        )
        
        keyboard = get_waiting_management_keyboard()
        await message.answer(status_text, reply_markup=keyboard)
        
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        print(f"Database error: {e}")
        
    finally:
        session.close()

@router.callback_query(F.data == "cancel_my_waiting")
async def cancel_my_waiting(callback: types.CallbackQuery):
    session = get_db_session()
    try:
        client = session.query(Client).filter_by(user_id=callback.from_user.id).first()
        
        if not client:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        waiting_entry = session.query(WaitingList).filter_by(
            client_id=client.id, 
            is_active=True
        ).first()
        
        if waiting_entry:
            waiting_entry.is_active = False
            session.commit()
            await callback.message.edit_text("‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è")
        else:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        session.rollback()
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏")
        print(f"Database error: {e}")
        
    finally:
        session.close()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_kb
    )